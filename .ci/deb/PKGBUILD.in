# Maintainer: crueter <crueter at crueter dot x y z>

pkgname=eden
pkgver=%PKGVER%
pkgrel=1
pkgdesc="High-performance Nintendo Switch emulator forked from yuzu."
arch=('amd64' 'arm64')
url="https://eden-emu.dev"
license=('GPL3')

# TODO(crueter): Separate some more bdeps/rdeps
depends=('libglu1-mesa-dev' 'libhidapi-dev'
	'libpulse-dev' 'libudev-dev' 'libxcb-icccm4' 'libxcb-image0' 'libxcb-keysyms1'
	'libxcb-render-util0' 'libxcb-xinerama0' 'libxcb-xkb1' 'libxext-dev' 'libxkbcommon-x11-0'
	'mesa-common-dev' 'qt6-base-private-dev' 'libenet-dev' 'libsimpleini-dev' 'libcpp-jwt-dev'
	'libfmt-dev' 'liblz4-dev' 'libzstd-dev' 'libssl-dev' 'libavfilter-dev'
	'libavcodec-dev' 'libswscale-dev' 'zlib1g-dev' 'libva-dev' 'libvdpau-dev' 'libcpp-httplib-dev'
	'libcubeb-dev' 'libvulkan-dev' 'spirv-tools' 'libusb-1.0-0-dev' 'libsdl2-dev'
	'libqt6core5compat6' 'libquazip1-qt6-dev' 'libopus-dev')

makedepends=('autoconf' 'glslang-tools' 'cmake' 'git' 'gcc' 'g++' 'ninja-build' 'qt6-tools-dev'
	'libtool' 'nasm' 'pkg-config' 'nlohmann-json3-dev' 'spirv-headers')

_newbdeps=('libfrozen-dev' 'vulkan-utility-libraries-dev' 'libvulkan-memory-allocator-dev')
_newrdeps=('libasound2t64' 'libboost-context-dev' 'libboost-fiber-dev')

noble_makedepends=("${makedepends[@]}" "${_newbdeps[@]}")
noble_depends=("${depends[@]}" "${_newrdeps[@]}")

trixie_makedepends=("${makedepends[@]}" "${_newbdeps[@]}")
trixie_depends=("${depends[@]}" "${_newrdeps[@]}" 'libmbedtls-dev')

# absolutely awesome feature where projects with boost don't compile on gcc 12 unless
# you use boost 1.81 SPECIFICALLY (which isn't default for some wonderful reason)
bookworm_depends=("${depends[@]}" 'libboost-context1.81-dev' 'libboost-fiber1.81-dev')

source=("file://$GITHUB_WORKSPACE")
noextract=("file://$GITHUB_WORKSPACE")
sha256sums=('SKIP')

build() {
	cd "$GITHUB_WORKSPACE"
	export TARGET=package-%ARCH%
	export COMPILER=gcc
    rm -rf build
	"$ROOTDIR"/.ci/common/configure.sh -DCCACHE_PATH="${SCCACHE_PATH}"
	cmake --build build
}

package() {
	cd "$GITHUB_WORKSPACE"
	DESTDIR="$pkgdir" cmake --install build
}