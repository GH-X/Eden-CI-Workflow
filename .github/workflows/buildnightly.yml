name: "[Internal CI][Nightly] Build Workflow"

on:
  workflow_call:
    inputs:
      devel:
        description: 'Development mode (disables update checker, adds nightly qualifier)'
        type: boolean
        default: true
      build-id:
        description: 'Identifier for workflows and caching'
        type: string
        default: 'master'

env:
  DISABLE_ARM: ${{ vars.DISABLE_ARM }}
  SCCACHE_GHA_ENABLED: "false"
  CCACHE: "false"
  CPM_CACHE_VERSION: "v7"
  FORGEJO_TOKEN: ${{ secrets.FORGEJO_TOKEN }}
  DEVEL: ${{ inputs.devel }}

jobs:
  clone:
    outputs:
      cachever: ${{ steps.out.outputs.cachever }}
      concurrency_group: ${{ steps.concurrency.outputs.group_key }}
      cancel_in_progress: ${{ steps.concurrency.outputs.cancel_in_progress }}
    name: "Parse and Clone"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Forgejo payload
        shell: bash
        run: |
          echo '${{ toJSON(github.event.client_payload) }}' > ./payload.json
          cat payload.json
          ./.ci/forgejomanual.sh --parse ${{ inputs.build-id }}

      - name: Load payload environment
        shell: bash
        run: |
          ./.ci/forgejomanual.sh --load-payload-env

      # for some amazing reason you can't pass env vars to reusable workflows
      - name: Setup Outputs
        id: out
        shell: bash
        run: |
          echo "cachever=${CPM_CACHE_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Define Concurrency group
        id: concurrency
        shell: bash
        run: |
          if [[ -n "${FORGEJO_PR_NUMBER}" ]]; then
            GROUP_KEY="pr-${{ inputs.build-id }}-${FORGEJO_PR_NUMBER}"
            CANCEL_IN_PROGRESS=true
          else
            GROUP_KEY="branch-${{ inputs.build-id }}-${FORGEJO_BRANCH}"
            if [[ "${FORGEJO_BRANCH}" == "master" && "${{ inputs.build-id }}" == "master" ]]; then
              CANCEL_IN_PROGRESS=false
            else
              CANCEL_IN_PROGRESS=true
            fi
          fi
          echo "group_key=$GROUP_KEY" >> "$GITHUB_OUTPUT"
          echo "cancel_in_progress=$CANCEL_IN_PROGRESS" >> "$GITHUB_OUTPUT"
          echo "Concurrency group: $GROUP_KEY, Cancel in progress: $CANCEL_IN_PROGRESS"

      - name: Clone
        shell: bash
        run: |
          ./.ci/forgejomanual.sh --clone ${{ inputs.build-id }}

      - name: Patch
        run: |
          ./patchwindows.sh

      - name: Load payload environment
        shell: bash
        run: |
          ./.ci/forgejomanual.sh --load-payload-env

      - name: Summary
        shell: bash
        run: |
          ./.ci/forgejomanual.sh --summary ${{ inputs.build-id }}

      - name: Cleanup
        run: |
          rm -rf eden/.ci eden/.github

      - name: Upload payload environment
        uses: actions/upload-artifact@v4
        with:
          name: forgejo-env
          path: forgejo.env

      - name: Upload cloned repo
        uses: actions/upload-artifact@v4
        with:
          name: eden
          include-hidden-files: true
          path: |
            eden/*
            eden/.patch

  concurrency-check:
    name: "Concurrency Check"
    runs-on: ubuntu-latest
    needs: [clone]
    concurrency:
      group: ${{ needs.clone.outputs.concurrency_group }}
      cancel-in-progress: ${{ fromJSON(needs.clone.outputs.cancel_in_progress) }}
    steps:
      - name: Confirm concurrency group
        run: |
          echo "Using concurrency group: ${{ needs.clone.outputs.concurrency_group }}"
          if [[ "${{ needs.clone.outputs.concurrency_group }}" == "branch-master-master" ]]; then
            echo "This build cant be auto-cancelled (master branch build)."
          else
            echo "Concurrent runs of this group will be cancelled if a new one starts."
          fi

  windows:
    name: "Windows"
    needs: [concurrency-check]
    uses: ./.github/workflows/windowsamd64.yml
    with:
      build-id: '${{ inputs.build-id }}'
      cpm-cache-version: '${{ needs.clone.outputs.cachever }}'
      devel: ${{ inputs.devel }}
    secrets: inherit
